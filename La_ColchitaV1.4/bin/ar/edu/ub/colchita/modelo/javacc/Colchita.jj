/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Colchita.jj */
/*@egen*//**
 * Gramatica del Proyecto Colchita. Tecnicatura en programacion de computadoras - tercer cuatrimestre - 2015.
 */
options
{
  STATIC = false;
              
                
}

PARSER_BEGIN(Colchita)
package ar.edu.ub.colchita.modelo.javacc;

import ar.edu.ub.colchita.modelo.EscritorModelo;
import ar.edu.ub.colchita.modelo.RetazoModelo;
@SuppressWarnings("unused")

public class Colchita/*@bgen(jjtree)*/implements ColchitaTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTColchitaState jjtree = new JJTColchitaState();

/*@egen*/}

PARSER_END(Colchita)

TOKEN : /*RETAZOS*/
{
  < RETAZO1 : "retazo1" >{EscritorModelo.escribir("retazo1");}
| < RETAZO2 : "retazo2" >{EscritorModelo.escribir("retazo2");}
}

TOKEN : /*OPERACIONES*/
{
  < GIRAR : "girar" >{EscritorModelo.escribir("girar");}
| < COSER : "coser" >{EscritorModelo.escribir("coser");}
}

TOKEN : /* SEPARADORES */
{
  < LPAREN: "(" >{EscritorModelo.escribir("(");}
| < RPAREN: ")" >{EscritorModelo.escribir(")");}
| < COMA: "," >{EscritorModelo.escribir(",");}
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

ASTPrincipal principal()            :
{/*@bgen(jjtree) Principal */
  ASTPrincipal jjtn000 = new ASTPrincipal(JJTPRINCIPAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Principal */
  try {
/*@egen*/
  sentencias()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencias()       :
{}
{
 (
    declaracionLocal()
 )*
}

void declaracionLocal()       :
{}
{
  girar()
| coser()
}

ASTRetazo retazos()        :
{/*@bgen(jjtree) Retazo */
 ASTRetazo jjtn000 = new ASTRetazo(JJTRETAZO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Retazo */
  try {
/*@egen*/
  (	 t = < RETAZO1 > {jjtn000.value = "retazo1";}
	|t = < RETAZO2 > {jjtn000.value = "retazo2";}    
  )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


ASTGirar girar()        :
{/*@bgen(jjtree) Girar */
 ASTGirar jjtn000 = new ASTGirar(JJTGIRAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Girar */
  try {
/*@egen*/
  (	  t = < GIRAR >< LPAREN >(declaracionLocal() | retazos())< RPAREN > {jjtn000.value = "girar";}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTCoser coser()       :
{/*@bgen(jjtree) Coser */
 ASTCoser jjtn000 = new ASTCoser(JJTCOSER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Coser */
  try {
/*@egen*/
  (
	  t = < COSER >< LPAREN >(declaracionLocal() | retazos())< COMA >(declaracionLocal() | retazos())< RPAREN > {jjtn000.value = "coser";}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}